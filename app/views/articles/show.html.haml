-# ajaxでアーティクルのIDを取得するためにidのデータ属性をつけてjsでとってくる
.article#article-show{data: {article_id: @article.id}}
  - if @article.eyecatch.attached?
    .article_image
      = image_tag @article.eyecatch
  %h1.article_title= @article.title
  .article_detail
    = link_to account_path(@article.user) do
      = image_tag @article.user.avatar_image
    %div
      %p= @article.user.display_name
      %p= @article.display_created_at
  -# ログインしていて、かつ、記事が自分が書いた記事である場合
  -# has_written?()はuser.rbに記述
  -# コードを一眼見た時に何が処理されているかをわかりやすくする。
  - if user_signed_in? && current_user.has_written?(@article)
    .article_detail_actions
      .dropdown
        = image_tag 'actions.svg', class: 'dropbtn'
        .dropdown-content.mini
          = link_to '編集する', edit_article_path(@article)
          = link_to '削除する', article_path(@article), data: { method: 'delete', confirm: '削除しますか？'}
  .article_content
    = @article.content
  -# likeを持っているかいないかで表示するハートを変える 
  - if user_signed_in?
    -# - if current_user.has_liked?(@article)
    -#   .article_heart
    -#     = link_to article_like_path(@article), data: {method: 'delete'} do
    -#       = image_tag 'heart-active.svg'
    -# - else
    -#   .article_heart
    -#     = link_to article_like_path(@article), data: {method: 'post'} do
    -#       = image_tag 'heart.svg'

    -# APIで操作するときはrubyで動かさない
    .article_heart.hidden.active-heart
      = image_tag 'heart-active.svg'
    .article_heart.hidden.inactive-heart
      = image_tag 'heart.svg'

.article
  %h2= I18n.t('articles.comment_list')
  -# - @comments.each do |comment|
  -#   .article_comment
  -#     %p= comment.content
  .comments-container

.container
  -# = link_to new_article_comment_path(@article) do
    -# .btn-secondary
    -#   コメントを追加
  .btn-secondary.show-comment-form
    コメントを追加
  .comment-text-area.hidden
    = text_area_tag :comment_content, '', class: 'sm'
    .btn-secondary.add-comment-button
      コメントを追加


= javascript_pack_tag 'article'